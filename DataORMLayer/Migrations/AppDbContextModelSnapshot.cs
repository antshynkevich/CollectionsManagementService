// <auto-generated />
using System;
using DataORMLayer.EfCoreCode;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataORMLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataORMLayer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataORMLayer.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Movies"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Books"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Clothes"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Games, Toys, and Figures"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Bills and Coins, Stamps"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Music Albums, Clips, and Records"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Firearms"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Cars and Vehicles"
                        },
                        new
                        {
                            CategoryId = 99,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("DataORMLayer.Models.Collection", b =>
                {
                    b.Property<Guid>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CollectionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            CollectionId = new Guid("eff0aef6-6bdb-46b6-a3d2-0b95cee5627b"),
                            CategoryId = 1,
                            Description = "The description of the \"IMDb top 10 movies\" collection",
                            Name = "IMDb top 10 movies",
                            UserId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3"
                        },
                        new
                        {
                            CollectionId = new Guid("c2255774-5eaa-4ba2-973d-59a0ddab4fd3"),
                            CategoryId = 2,
                            Description = "A Torah, a Bible, and a Qur’an",
                            Name = "Art of Three Faiths",
                            UserId = "7D9B7113-A8F8-4035-99A7-A20DD400F6A3"
                        });
                });

            modelBuilder.Entity("DataORMLayer.Models.CollectionField", b =>
                {
                    b.Property<Guid>("CollectionFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollectionFieldId");

                    b.HasIndex("CollectionId");

                    b.ToTable("CollectionFields");

                    b.HasData(
                        new
                        {
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            CollectionId = new Guid("eff0aef6-6bdb-46b6-a3d2-0b95cee5627b"),
                            FieldName = "Movie Title",
                            FieldType = "String"
                        },
                        new
                        {
                            CollectionFieldId = new Guid("31183a51-fdd9-4d70-a6bc-ad81ccc9616a"),
                            CollectionId = new Guid("eff0aef6-6bdb-46b6-a3d2-0b95cee5627b"),
                            FieldName = "IMDb Score",
                            FieldType = "Integer"
                        },
                        new
                        {
                            CollectionFieldId = new Guid("0eb65c24-a088-4ea3-a516-748f23b8c4fc"),
                            CollectionId = new Guid("eff0aef6-6bdb-46b6-a3d2-0b95cee5627b"),
                            FieldName = "Relise date",
                            FieldType = "Date"
                        },
                        new
                        {
                            CollectionFieldId = new Guid("4ac59045-c266-42f7-83d1-90d662c70d50"),
                            CollectionId = new Guid("eff0aef6-6bdb-46b6-a3d2-0b95cee5627b"),
                            FieldName = "Move plot",
                            FieldType = "Text"
                        });
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.BooleanField", b =>
                {
                    b.Property<Guid>("BooleanFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Value")
                        .HasColumnType("bit");

                    b.HasKey("BooleanFieldId");

                    b.HasIndex("CollectionFieldId");

                    b.HasIndex("ItemId");

                    b.ToTable("BooleanFields");
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.DateField", b =>
                {
                    b.Property<Guid>("DateFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Value")
                        .HasColumnType("date");

                    b.HasKey("DateFieldId");

                    b.HasIndex("CollectionFieldId");

                    b.HasIndex("ItemId");

                    b.ToTable("DateFields");

                    b.HasData(
                        new
                        {
                            DateFieldId = new Guid("39c75b2e-a926-41c8-bfde-3c23cb347078"),
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            ItemId = new Guid("cbe77005-a0a5-4801-96d4-e0014ec9d7d6"),
                            Value = new DateTime(1994, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DateFieldId = new Guid("1175037b-c5f6-4685-b85b-5ca5de399f26"),
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            ItemId = new Guid("6f4d4ac6-2821-44a5-b8d0-d3351347a251"),
                            Value = new DateTime(1972, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DateFieldId = new Guid("40a111ae-352b-4c38-96ac-343d52bcb8b6"),
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            ItemId = new Guid("62b2c231-6cc2-43aa-bd50-d0ad23dd4afe"),
                            Value = new DateTime(2008, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.IntegerField", b =>
                {
                    b.Property<Guid>("IntegerFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("IntegerFieldId");

                    b.HasIndex("CollectionFieldId");

                    b.HasIndex("ItemId");

                    b.ToTable("IntegerFields");

                    b.HasData(
                        new
                        {
                            IntegerFieldId = new Guid("69762eb8-d70e-41fd-8f97-3564231a3439"),
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            ItemId = new Guid("cbe77005-a0a5-4801-96d4-e0014ec9d7d6"),
                            Value = 93
                        },
                        new
                        {
                            IntegerFieldId = new Guid("0cfbf1b1-dcde-4942-8f82-787f4e82e133"),
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            ItemId = new Guid("6f4d4ac6-2821-44a5-b8d0-d3351347a251"),
                            Value = 92
                        },
                        new
                        {
                            IntegerFieldId = new Guid("7bed4ab8-c6c5-41de-a901-ee4a9f0b02cb"),
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            ItemId = new Guid("62b2c231-6cc2-43aa-bd50-d0ad23dd4afe"),
                            Value = 90
                        });
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.StringField", b =>
                {
                    b.Property<Guid>("StringFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("StringFieldId");

                    b.HasIndex("CollectionFieldId");

                    b.HasIndex("ItemId");

                    b.ToTable("StringFields");

                    b.HasData(
                        new
                        {
                            StringFieldId = new Guid("8a724c23-b070-4bb8-9236-494782ede9f3"),
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            ItemId = new Guid("cbe77005-a0a5-4801-96d4-e0014ec9d7d6"),
                            Value = "The Shawshank Redemption"
                        },
                        new
                        {
                            StringFieldId = new Guid("c1af57aa-a7cc-4de5-b73f-06597d413d4a"),
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            ItemId = new Guid("6f4d4ac6-2821-44a5-b8d0-d3351347a251"),
                            Value = "The Godfather"
                        },
                        new
                        {
                            StringFieldId = new Guid("981ae0b9-570e-4bd8-aabc-4fbd008efcff"),
                            CollectionFieldId = new Guid("4eb4a691-e619-4f1a-b3c7-9ce2538f008d"),
                            ItemId = new Guid("62b2c231-6cc2-43aa-bd50-d0ad23dd4afe"),
                            Value = "The Dark Knight"
                        });
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.TextField", b =>
                {
                    b.Property<Guid>("TextFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("TextFieldId");

                    b.HasIndex("CollectionFieldId");

                    b.HasIndex("ItemId");

                    b.ToTable("TextFields");

                    b.HasData(
                        new
                        {
                            TextFieldId = new Guid("81f2fb1a-9a85-4098-a752-84b244a71b94"),
                            CollectionFieldId = new Guid("4ac59045-c266-42f7-83d1-90d662c70d50"),
                            ItemId = new Guid("cbe77005-a0a5-4801-96d4-e0014ec9d7d6"),
                            Value = "Over the course of several years, two convicts form a friendship, seeking consolation and, eventually, redemption through basic compassion."
                        },
                        new
                        {
                            TextFieldId = new Guid("46aac2de-feef-42c2-ac84-2aa766cfc527"),
                            CollectionFieldId = new Guid("4ac59045-c266-42f7-83d1-90d662c70d50"),
                            ItemId = new Guid("6f4d4ac6-2821-44a5-b8d0-d3351347a251"),
                            Value = "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son."
                        },
                        new
                        {
                            TextFieldId = new Guid("d2f00405-3022-4bd5-8213-9b5ebbc1e6d5"),
                            CollectionFieldId = new Guid("4ac59045-c266-42f7-83d1-90d662c70d50"),
                            ItemId = new Guid("62b2c231-6cc2-43aa-bd50-d0ad23dd4afe"),
                            Value = "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice."
                        });
                });

            modelBuilder.Entity("DataORMLayer.Models.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("ItemId");

                    b.HasIndex("CollectionId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = new Guid("cbe77005-a0a5-4801-96d4-e0014ec9d7d6"),
                            CollectionId = new Guid("eff0aef6-6bdb-46b6-a3d2-0b95cee5627b"),
                            Name = "First position"
                        },
                        new
                        {
                            ItemId = new Guid("6f4d4ac6-2821-44a5-b8d0-d3351347a251"),
                            CollectionId = new Guid("eff0aef6-6bdb-46b6-a3d2-0b95cee5627b"),
                            Name = "Second position"
                        },
                        new
                        {
                            ItemId = new Guid("62b2c231-6cc2-43aa-bd50-d0ad23dd4afe"),
                            CollectionId = new Guid("eff0aef6-6bdb-46b6-a3d2-0b95cee5627b"),
                            Name = "3rd position"
                        });
                });

            modelBuilder.Entity("DataORMLayer.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ItemTag", b =>
                {
                    b.Property<Guid>("ItemsItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsTagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemsItemId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("ItemTag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataORMLayer.Models.Collection", b =>
                {
                    b.HasOne("DataORMLayer.Models.Category", "Category")
                        .WithMany("Collections")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataORMLayer.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataORMLayer.Models.CollectionField", b =>
                {
                    b.HasOne("DataORMLayer.Models.Collection", "Collection")
                        .WithMany("CollectionFields")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.BooleanField", b =>
                {
                    b.HasOne("DataORMLayer.Models.CollectionField", "CollectionField")
                        .WithMany()
                        .HasForeignKey("CollectionFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataORMLayer.Models.Item", "Item")
                        .WithMany("BooleanFields")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CollectionField");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.DateField", b =>
                {
                    b.HasOne("DataORMLayer.Models.CollectionField", "CollectionField")
                        .WithMany()
                        .HasForeignKey("CollectionFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataORMLayer.Models.Item", "Item")
                        .WithMany("DateFields")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CollectionField");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.IntegerField", b =>
                {
                    b.HasOne("DataORMLayer.Models.CollectionField", "CollectionField")
                        .WithMany()
                        .HasForeignKey("CollectionFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataORMLayer.Models.Item", "Item")
                        .WithMany("IntegerFields")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CollectionField");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.StringField", b =>
                {
                    b.HasOne("DataORMLayer.Models.CollectionField", "CollectionField")
                        .WithMany()
                        .HasForeignKey("CollectionFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataORMLayer.Models.Item", "Item")
                        .WithMany("StringFields")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CollectionField");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataORMLayer.Models.CustomDataFields.TextField", b =>
                {
                    b.HasOne("DataORMLayer.Models.CollectionField", "CollectionField")
                        .WithMany()
                        .HasForeignKey("CollectionFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataORMLayer.Models.Item", "Item")
                        .WithMany("TextFields")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CollectionField");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataORMLayer.Models.Item", b =>
                {
                    b.HasOne("DataORMLayer.Models.Collection", "Collection")
                        .WithMany("Items")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ItemTag", b =>
                {
                    b.HasOne("DataORMLayer.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataORMLayer.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataORMLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataORMLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataORMLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataORMLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataORMLayer.Models.ApplicationUser", b =>
                {
                    b.Navigation("Collections");
                });

            modelBuilder.Entity("DataORMLayer.Models.Category", b =>
                {
                    b.Navigation("Collections");
                });

            modelBuilder.Entity("DataORMLayer.Models.Collection", b =>
                {
                    b.Navigation("CollectionFields");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("DataORMLayer.Models.Item", b =>
                {
                    b.Navigation("BooleanFields");

                    b.Navigation("DateFields");

                    b.Navigation("IntegerFields");

                    b.Navigation("StringFields");

                    b.Navigation("TextFields");
                });
#pragma warning restore 612, 618
        }
    }
}
